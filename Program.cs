using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Microsoft.Graph;
using Microsoft.Graph.Auth;
using Microsoft.Identity.Client;

namespace automateAPIMPolicy
{
    class Program
    {
        private static string ClientSecret = "<client secret>";
        private static string ClientID = "a8f46e38-7568-4136-8c74-d25ed740a4bc";
        private static string TenantID = "b55f0c51-61a7-45c3-84df-33569b247796";

        private static GraphServiceClient graphClient;
        static async Task Main(string[] args)
        {
            /// Create 2 App Registrations
            // 1 for the APIM 
            // 1 for the client app (Power App)
            // From this we should grab the following information
            // - api app Client ID (for JWTTokenValidation in APIM)
            // - api app scope i.e API Resource URL + /.default (for PowerApp)
            // - client app Client ID (for PowerApp)
            // - clent app Client Secret (for PowerApp)
            // - Tenand Id (for PowerApp)
            // - Resource URL (for PowerApp )
            graphClient = new GraphServiceClient(GetMsalClient());

            var app = await graphClient.Applications
                            .Request()
                            .AddAsync(GetApplication());

            Console.WriteLine("AAD App Registration created");
            
            var clientAppToAdd = GetClientApplication(app);
            var clientApp = await graphClient.Applications
                            .Request()
                            .AddAsync(clientAppToAdd);

            Console.WriteLine("AAD App Registration for client app created");
            
            // add a client secret
            var clientAppCredential = await graphClient.Applications[clientApp.Id]
                            .AddPassword(GetPasswordCredential())
                            .Request()
                            .PostAsync();
            Console.WriteLine("Client Secret for client app created");
            

            // create the JWT token policy for the APIM
            var token = await GetAccessTokenForAzureRM();
            var tenantId = "a3224a3f-3d62-4b9a-b070-dd7305016a23";
            var apiAppId = "db5e7120-6fca-43fd-85e0-3ebc0912f6c7";
            var httpClient = new HttpClient();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var policy = new Properties { Value = GetJWTPolicyForAPI(apiAppId, tenantId)};
            var jwtValidationPolicy = new JWTValidationPolicy{Properties = policy};
            var jsonPolicy = JsonSerializer.Serialize(jwtValidationPolicy);
            var content = new StringContent(jsonPolicy);

            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            // TODO: the uri should not be hardcoded
            string uri = "https://management.azure.com/subscriptions/7ab070b2-d112-4fe1-ae56-92978ac7e02a/resourceGroups/cmapimdemo/providers/Microsoft.ApiManagement/service/cm-apim-demo/apis/test/policies/policy?api-version=2020-06-01-preview";
            var result = await httpClient.PutAsync(uri, content);
            
            Console.WriteLine("Done");
        }

        private static Application GetClientApplication(Application app) => new Application
        {
            DisplayName = "DemoClientAppWithRoles",
            Web = new WebApplication
            {
                // TODO - we need to check with the PowerApps team 
                // this value should be replaced by the Redirect URI that gets autogenerated
                // by the PowerApps Connector
                RedirectUris = new List<string>(){"https://global.consent.azure-apim.net/redirect"}
            },
            RequiredResourceAccess = new List<RequiredResourceAccess>()
            {
                new RequiredResourceAccess
                {
                    ResourceAppId = app.AppId,
                    ResourceAccess = new List<ResourceAccess>()
                    {
                        new ResourceAccess
                        {
                            Id = app.Api.Oauth2PermissionScopes.FirstOrDefault().Id,
                            Type = "Scope"
                        }
                    }
                }
            }  
        };

        private static ClientCredentialProvider GetMsalClient()
        {
            IConfidentialClientApplication confidentialClientApplication = ConfidentialClientApplicationBuilder
                .Create(ClientID)
                .WithTenantId(TenantID)
                .WithClientSecret(ClientSecret) //you could do interactive auth here instead
                .Build();

            return new ClientCredentialProvider(confidentialClientApplication);
        }

        private static Application GetApplication() => new Application
        {
            DisplayName = "DemoServiceWithRoles",
            IdentifierUris = new List<String>()
            {
                $"api://{Guid.NewGuid().ToString()}"
            },
            Spa = new SpaApplication
            {
                RedirectUris = new List<String>()
                {
                    "https://localhost:5001/swagger/oauth2-redirect.html"
                }
            },
            Api = new ApiApplication
            {
                AcceptMappedClaims = null,
                KnownClientApplications = new List<Guid>()
                {
                },
                RequestedAccessTokenVersion = 2,
                PreAuthorizedApplications = new List<PreAuthorizedApplication>()
                {
                }
            },
            AppRoles = new List<AppRole> 
            {
                new AppRole
                {
                    Id = Guid.NewGuid(),
                    DisplayName = "Access as application",
                    Description = "App Role for client application",
                    IsEnabled = true,
                    Origin = "Application",
                    Value = "access_as_application",
                    AllowedMemberTypes = new [] {"Applications"}
                }
            }
        };

        private static PasswordCredential GetPasswordCredential() => new PasswordCredential()
        {
            DisplayName = "DefaultSecret"
        };
    
        private static async Task<string> GetAccessTokenForAzureRM()
        {
             var client = new ClientSecretCredential(
                tenantId: "a3224a3f-3d62-4b9a-b070-dd7305016a23", 
                clientId:"778671d4-7b9d-44b2-aab3-5bdff51a7196",
                clientSecret: "<Client Secret>");

            var tokenRequestContext = new TokenRequestContext(new string[]{"https://management.azure.com/.default"});
            var token =  await client.GetTokenAsync(tokenRequestContext);
            return token.Token;
        }

        private static string GetJWTPolicyForAPI(string apiAppId, string tenantId)
        {
            
            var policyBase = "<policies><inbound><validate-jwt header-name=\"Authorization\" failed-validation-httpcode=\"401\" failed-validation-error-message=\"Unauthorized. Access token is missing or invalid.\"><openid-config url=\"https://login.microsoftonline.com/{0}/.well-known/openid-configuration\"/><required-claims><claim name=\"aud\"><value>{1}</value></claim></required-claims></validate-jwt></inbound></policies>";
            return String.Format(policyBase, tenantId, apiAppId);
        }
    }

    public class JWTValidationPolicy
    {
    [JsonPropertyName("properties")]
    public Properties Properties{get;set;}
    }

    public class Properties
    {
    [JsonPropertyName("format")]
    public string Format => "rawxml";

    [JsonPropertyName("value")]
    public string Value { get; set; }
    }
}
